name: 파일처리 과제 프로젝트 1 빌드 및 테스트

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  copy_tests:
    runs-on: ubuntu-22.04
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: 기본 GCC를 사용하여 copy.c 컴파일
        run: |
          gcc -o copy copy.c

      - name: 일반 파일 복사 테스트
        run: |
          # 원본 파일 생성
          echo "GitHub Actions 테스트 파일" > source.txt
          # copy 실행: source.txt를 복사하여 dest.txt로 생성
          ./copy source.txt dest.txt
          # 결과 검증
          diff source.txt dest.txt || { echo 'Copy test failed: source.txt and dest.txt differ'; exit 1; }
          # 정리
          rm source.txt dest.txt

      - name: 빈 파일 복사 테스트
        run: |
          # 빈 파일 생성
          touch empty.txt
          # copy 실행: 빈 파일 복사
          ./copy empty.txt empty_copy.txt
          # 결과 검증
          diff empty.txt empty_copy.txt || { echo 'Copy test failed: empty file copy did not match'; exit 1; }
          # 정리
          rm empty.txt empty_copy.txt

      - name: 바이너리 파일 복사 테스트
        run: |
          # 1MB 크기의 바이너리 파일 생성
          head -c 1048576 /dev/urandom > binary_source.bin
          # copy 실행: 바이너리 파일 복사
          ./copy binary_source.bin binary_dest.bin
          # 결과 검증
          diff binary_source.bin binary_dest.bin || { echo 'Copy test failed: binary file copy did not match'; exit 1; }
          # 정리
          rm binary_source.bin binary_dest.bin

      - name: 존재하지 않는 소스 파일 복사 테스트
        run: |
          # 존재하지 않는 소스 파일로 copy 실행, 실패가 예상됨
          ./copy non_existent.txt dest.txt && { echo 'Copy test failed: expected failure on non-existent source'; exit 1; } || echo "Expected failure occurred."

  merge_tests:
    runs-on: ubuntu-22.04
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: 기본 GCC를 사용하여 merge.c 컴파일
        run: |
          gcc -o merge merge.c

      - name: 테스트 입력 준비 및 merge 실행
        run: |
          # 첫 번째 입력 파일 생성
          echo "Hello from file 1" > file1.txt
          # 두 번째 입력 파일 생성
          echo "Hello from file 2" > file2.txt
          # merge 실행: output.txt에 file1.txt와 file2.txt 병합 결과 저장
          ./merge output.txt file1.txt file2.txt

      - name: diff를 사용하여 출력 결과 검증
        run: |
          # 두 입력 파일을 순서대로 연결한 expected.txt 파일 생성
          cat file1.txt file2.txt > expected.txt
          # 출력 결과와 expected.txt 파일을 비교, 차이가 있으면 실패
          diff expected.txt output.txt || { echo 'Merge test failed: output.txt does not match expected.txt'; exit 1; }

      - name: 출력 파일 크기 검증
        run: |
          size1=$(stat -c %s file1.txt)
          size2=$(stat -c %s file2.txt)
          total=$((size1+size2))
          out_size=$(stat -c %s output.txt)
          if [ "$out_size" -ne "$total" ]; then
            echo "Merge test failed: output.txt size ($out_size) does not equal sum of file1.txt ($size1) and file2.txt ($size2)"
            exit 1
          else
            echo "Output file size verification succeeded."
          fi

  read_tests:
    runs-on: ubuntu-22.04
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: 기본 GCC를 사용하여 read.c 컴파일
        run: |
          gcc -o read read.c

      - name: read 기능 테스트
        run: |
          # 테스트용 파일 생성: 알파벳 소문자 26자를 포함하는 파일 생성
          echo "abcdefghijklmnopqrstuvwxyz" > test.txt
          
          # 테스트 1: 오프셋 5, 바이트 수 10 (예상 결과: "fghijklmno")
          expected_output=$(echo -n "fghijklmno")
          output=$(./read 5 10 test.txt)
          if [ "$output" != "$expected_output" ]; then
            echo "테스트 1 실패: 예상 결과 '$expected_output', 실제 결과 '$output'"
            exit 1
          fi
          
          # 테스트 2: 바이트 수 0인 경우 (출력은 빈 문자열)
          output=$(./read 5 0 test.txt)
          if [ -n "$output" ]; then
            echo "테스트 2 실패: 바이트 수가 0이면 출력이 없어야 함. 실제 결과 '$output'"
            exit 1
          fi
          
          # 테스트 3: 남은 바이트보다 큰 요청 - 오프셋 20, 바이트 수 10 (예상 결과: "uvwxyz")
          expected_output=$(echo -n "uvwxyz")
          output=$(./read 20 10 test.txt)
          if [ "$output" != "$expected_output" ]; then
            echo "테스트 3 실패: 예상 결과 '$expected_output', 실제 결과 '$output'"
            exit 1
          fi
          
          # 테스트 4: 오프셋이 파일 크기와 같은 경우 (출력은 빈 문자열)
          file_length=$(stat -c %s test.txt)
          output=$(./read $file_length 10 test.txt)
          if [ -n "$output" ]; then
            echo "테스트 4 실패: 파일 크기와 동일한 오프셋이면 출력이 없어야 함. 실제 결과 '$output'"
            exit 1
          fi
          
          echo "모든 read.c 테스트가 통과되었습니다."

  write_tests:
    runs-on: ubuntu-22.04
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: 기본 GCC를 사용하여 write.c 컴파일
        run: |
          gcc -o write write.c

      - name: write 테스트 - 파일 중간 덮어쓰기
        run: |
          # 원본 파일 생성
          echo "1234567890" > test_write_mid.txt
          # 오프셋 5에서 "abc"로 덮어쓰기 (즉, 위치 5,6,7)
          ./write 5 "abc" test_write_mid.txt
          # 예상 결과: "12345abc90"
          echo "12345abc90" > expected_mid.txt
          diff test_write_mid.txt expected_mid.txt || { echo 'Write test failed: middle overwrite'; exit 1; }

      - name: write 테스트 - 파일 시작 부분 덮어쓰기
        run: |
          # 원본 파일 생성
          echo "abcdefghij" > test_write_begin.txt
          # 오프셋 0에서 "XYZ"로 덮어쓰기
          ./write 0 "XYZ" test_write_begin.txt
          # 예상 결과: "XYZdefghij"
          echo "XYZdefghij" > expected_begin.txt
          diff test_write_begin.txt expected_begin.txt || { echo 'Write test failed: beginning overwrite'; exit 1; }

      - name: write 테스트 - 파일 끝에 추가
        run: |
          # 원본 파일 생성
          echo "hello" > test_write_append.txt
          # 오프셋 5(파일 길이)에서 " world"를 덮어쓰기하여 파일 확장
          ./write 5 " world" test_write_append.txt
          # 예상 결과: "hello world"
          echo "hello world" > expected_append.txt
          diff test_write_append.txt expected_append.txt || { echo 'Write test failed: append at EOF'; exit 1; }

      - name: write 테스트 - 빈 파일에 덮어쓰기
        run: |
          # 빈 파일 생성
          touch test_write_empty.txt
          # 오프셋 0에서 "data"로 덮어쓰기
          ./write 0 "data" test_write_empty.txt
          # 예상 결과: "data"
          echo "data" > expected_empty.txt
          diff test_write_empty.txt expected_empty.txt || { echo 'Write test failed: empty file overwrite'; exit 1; }

      - name: write 테스트 - 파일 확장 발생 덮어쓰기
        run: |
          # 원본 파일 생성: "1234"
          echo "1234" > test_write_extend.txt
          # 오프셋 2에서 "XYZ123"로 덮어쓰기 (기존 내용 일부 덮어쓰고 파일 확장)
          ./write 2 "XYZ123" test_write_extend.txt
          # 예상 결과: 앞의 2문자 "12" + "XYZ123" => "12XYZ123"
          echo "12XYZ123" > expected_extend.txt
          diff test_write_extend.txt expected_extend.txt || { echo 'Write test failed: overwrite with extension'; exit 1; }

  insert_tests:
    runs-on: ubuntu-22.04
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: 기본 GCC를 사용하여 insert.c 컴파일
        run: |
          gcc -o insert insert.c

      - name: insert 테스트 케이스 1 - 파일 범위 내 오프셋
        run: |
          echo "abcdefghij" > insert1.txt
          ./insert 5 "XYZ" insert1.txt
          echo "abcdeXYZfghij" > expected_insert1.txt
          diff expected_insert1.txt insert1.txt || { echo 'Insert test 1 failed'; exit 1; }

      - name: insert 테스트 케이스 2 - 오프셋이 파일 길이와 같음 (EOF에 추가)
        run: |
          echo "hello" > insert2.txt
          ./insert 5 " world" insert2.txt
          echo "hello world" > expected_insert2.txt
          diff expected_insert2.txt insert2.txt || { echo 'Insert test 2 failed'; exit 1; }

      - name: insert 테스트 케이스 3 - 중간 오프셋, 남은 부분보다 긴 데이터 (파일 확장)
        run: |
          echo "12345" > insert3.txt
          ./insert 3 "ABCDE" insert3.txt
          echo "123ABCDE45" > expected_insert3.txt
          diff expected_insert3.txt insert3.txt || { echo 'Insert test 3 failed'; exit 1; }

      - name: insert 테스트 케이스 4 - 오프셋 0 (파일 시작 부분 덮어쓰기)
        run: |
          echo "abcdef" > insert4.txt
          ./insert 0 "NEW" insert4.txt
          echo "NEWabcdef" > expected_insert4.txt
          diff expected_insert4.txt insert4.txt || { echo 'Insert test 4 failed'; exit 1; }

      - name: insert 테스트 케이스 5 - 중간 오프셋, 파일 확장 발생
        run: |
          echo "0123456" > insert5.txt
          ./insert 4 "XYZW" insert5.txt
          echo "0123XYZW456" > expected_insert5.txt
          diff expected_insert5.txt insert5.txt || { echo 'Insert test 5 failed'; exit 1; }

  delete_tests:
    runs-on: ubuntu-22.04
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: 기본 GCC를 사용하여 delete.c 컴파일
        run: |
          gcc -o delete delete.c

      - name: delete 테스트 케이스 1 - offset=0, 바이트 수=0 (삭제 없음)
        run: |
          echo "ABCDEFG" > delete_test1.txt
          # 예상 결과: "ABCDEFG" (변경 없음)
          ./delete 0 0 delete_test1.txt
          echo "ABCDEFG" > expected_test1.txt
          diff expected_test1.txt delete_test1.txt || { echo 'Delete test 1 failed'; exit 1; }

      - name: delete 테스트 케이스 2 - offset=0, 바이트 수=3 (파일 시작 부분 삭제)
        run: |
          echo "ABCDEFG" > delete_test2.txt
          # 예상 결과: "DEFG" (앞 3바이트 삭제)
          ./delete 0 3 delete_test2.txt
          echo "DEFG" > expected_test2.txt
          diff expected_test2.txt delete_test2.txt || { echo 'Delete test 2 failed'; exit 1; }

      - name: delete 테스트 케이스 3 - 중간 offset 삭제
        run: |
          echo "HelloWorld" > delete_test3.txt
          # offset=5, 바이트 수=3 => "Hello" + (skip "Wor") + "ld" => "Hellold"
          ./delete 5 3 delete_test3.txt
          echo "Hellold" > expected_test3.txt
          diff expected_test3.txt delete_test3.txt || { echo 'Delete test 3 failed'; exit 1; }

      - name: delete 테스트 케이스 4 - offset이 파일 길이를 초과
        run: |
          echo "ABCDEF" > delete_test4.txt
          # offset=10, 바이트 수=5 => 파일 길이(6)를 넘어서는 오프셋, 실제로 삭제되는 데이터 없음
          ./delete 10 5 delete_test4.txt
          echo "ABCDEF" > expected_test4.txt
          diff expected_test4.txt delete_test4.txt || { echo 'Delete test 4 failed'; exit 1; }

      - name: delete 테스트 케이스 5 - offset+바이트 수가 파일 크기보다 큼
        run: |
          echo "1234567890" > delete_test5.txt
          # offset=7, 바이트 수=10 => 삭제 범위는 7~16이지만 실제로는 7~9까지 삭제
          # 원본: "1234567890"
          # 결과: "1234567" + (skip "890") => "1234567"
          ./delete 7 10 delete_test5.txt
          echo "1234567" > expected_test5.txt
          diff expected_test5.txt delete_test5.txt || { echo 'Delete test 5 failed'; exit 1; }

      - name: 모든 delete 테스트 완료
        run: echo "모든 delete.c 테스트가 통과되었습니다."